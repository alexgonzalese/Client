{"ast":null,"code":"var _jsxFileName = \"C:\\\\ReacProyects\\\\WebPersonal\\\\Client\\\\src\\\\providers\\\\AuthProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, createContext } from \"react\";\nimport { getAccessTokenApi, getRefreshTokenApi, refreshAcessTokenApi, logout } from \"../api/auth\";\nimport jwtDecode from \"jwt-decode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport default function AuthProvider(props) {\n  _s();\n\n  const {\n    children\n  } = props;\n  const [user, setUser] = useState({\n    user: null,\n    isLoading: true\n  }); //TO DO: VER BIEN COMO ES EL FUNCIONAMIENTO\n\n  useEffect(() => {\n    checkUserLogin(setUser);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: user,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 11\n  }, this);\n}\n\n_s(AuthProvider, \"pmfH3EeRSn0KHCTU+5zRtY7wkBI=\");\n\n_c = AuthProvider;\n\nfunction checkUserLogin(setUser) {\n  const accessToken = getAccessTokenApi();\n\n  if (!accessToken) {\n    const refreshToken = getRefreshTokenApi();\n\n    if (!refreshToken) {\n      logout();\n      setUser({\n        user: null,\n        isLoading: false\n      });\n    } else {\n      getRefreshTokenApi(refreshToken);\n    }\n  } else {\n    setUser({\n      isLoading: false,\n      user: jwtDecode(accessToken)\n    });\n  }\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["C:/ReacProyects/WebPersonal/Client/src/providers/AuthProvider.js"],"names":["React","useState","useEffect","createContext","getAccessTokenApi","getRefreshTokenApi","refreshAcessTokenApi","logout","jwtDecode","AuthContext","AuthProvider","props","children","user","setUser","isLoading","checkUserLogin","accessToken","refreshToken"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,aAApC,QAAwD,OAAxD;AACA,SAAQC,iBAAR,EAA2BC,kBAA3B,EAA+CC,oBAA/C,EAAqEC,MAArE,QAAkF,aAAlF;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAGA,OAAO,MAAMC,WAAW,gBAAGN,aAAa,EAAjC;AAEP,eAAe,SAASO,YAAT,CAAsBC,KAAtB,EAA4B;AAAA;;AACvC,QAAM;AAACC,IAAAA;AAAD,MAAaD,KAAnB;AACA,QAAM,CAACE,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC;AAC7BY,IAAAA,IAAI,EAAE,IADuB;AAE7BE,IAAAA,SAAS,EAAC;AAFmB,GAAD,CAAhC,CAFuC,CAMvC;;AAEAb,EAAAA,SAAS,CAAC,MAAI;AACVc,IAAAA,cAAc,CAACF,OAAD,CAAd;AACH,GAFQ,EAEP,EAFO,CAAT;AAIA,sBAAM,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAED,IAA7B;AAAA,cAAoCD;AAApC;AAAA;AAAA;AAAA;AAAA,UAAN;AACH;;GAbuBF,Y;;KAAAA,Y;;AAexB,SAASM,cAAT,CAAwBF,OAAxB,EAAgC;AAC5B,QAAMG,WAAW,GAAGb,iBAAiB,EAArC;;AAEA,MAAG,CAACa,WAAJ,EAAgB;AACZ,UAAMC,YAAY,GAAGb,kBAAkB,EAAvC;;AAEA,QAAG,CAACa,YAAJ,EAAiB;AACbX,MAAAA,MAAM;AACNO,MAAAA,OAAO,CAAC;AACJD,QAAAA,IAAI,EAAC,IADD;AAEJE,QAAAA,SAAS,EAAE;AAFP,OAAD,CAAP;AAIH,KAND,MAMK;AACDV,MAAAA,kBAAkB,CAACa,YAAD,CAAlB;AACH;AACJ,GAZD,MAYK;AACDJ,IAAAA,OAAO,CAAC;AACJC,MAAAA,SAAS,EAAC,KADN;AAEJF,MAAAA,IAAI,EAAEL,SAAS,CAACS,WAAD;AAFX,KAAD,CAAP;AAIH;AACJ","sourcesContent":["import React, {useState, useEffect, createContext} from \"react\";\r\nimport {getAccessTokenApi, getRefreshTokenApi, refreshAcessTokenApi, logout} from \"../api/auth\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport default function AuthProvider(props){\r\n    const {children} = props;\r\n    const [user, setUser] = useState({\r\n        user: null,\r\n        isLoading:true\r\n    });\r\n    //TO DO: VER BIEN COMO ES EL FUNCIONAMIENTO\r\n\r\n    useEffect(()=>{\r\n        checkUserLogin(setUser);\r\n    },[]);\r\n\r\n    return<AuthContext.Provider value={user}>{children}</AuthContext.Provider>;\r\n}\r\n\r\nfunction checkUserLogin(setUser){\r\n    const accessToken = getAccessTokenApi();\r\n\r\n    if(!accessToken){\r\n        const refreshToken = getRefreshTokenApi();\r\n\r\n        if(!refreshToken){\r\n            logout();\r\n            setUser({\r\n                user:null,\r\n                isLoading: false\r\n            });\r\n        }else{\r\n            getRefreshTokenApi(refreshToken);\r\n        }\r\n    }else{\r\n        setUser({\r\n            isLoading:false,\r\n            user: jwtDecode(accessToken)\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}