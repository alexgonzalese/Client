{"ast":null,"code":"import { basePath, apiVersion } from \"./config\";\nimport { ACCESS_TOKEN, REFRESH_TOKEN } from \"../utils/constants\";\nimport jwtDecode from \"jwt-decode\";\nexport function getAccessTokenApi() {\n  const accessToken = localStorage.getItem(ACCESS_TOKEN);\n\n  if (!accessToken || accessToken === \"null\") {\n    return null;\n  }\n\n  return willExpireToken(accessToken) ? null : accessToken;\n}\nexport function getRefreshTokenApi() {\n  const refreshToken = localStorage.getItem(REFRESH_TOKEN);\n\n  if (!refreshToken || refreshToken === \"null\") {\n    return null;\n  }\n\n  return willExpireToken(refreshToken) ? null : refreshToken;\n}\nexport function refreshAcessTokenApi(refreshToken) {\n  const url = `${basePath}/${apiVersion}/refresh-access-token`;\n  const params = {\n    method: \"POST\",\n    body: JSON.stringify(refreshToken),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  return fetch(url, params).then(response => {\n    if (response.status !== 200) {\n      return null;\n    }\n\n    return response.json();\n  }).then(result => {\n    if (!result) {\n      logout();\n    } else {\n      const {\n        accessToken,\n        refreshToken\n      } = result;\n      localStorage.setItem(ACCESS_TOKEN, accessToken);\n      localStorage.setItem(REFRESH_TOKEN, refreshToken);\n    }\n  });\n}\nexport function logout() {\n  localStorage.removeItem(ACCESS_TOKEN);\n  localStorage.removeItem(REFRESH_TOKEN);\n}\n\nfunction willExpireToken(token) {\n  const seconds = 60;\n  const metaToken = jwtDecode(token);\n  const {\n    exp\n  } = metaToken;\n  const now = (Date.now() + seconds) / 1000; //se agrega el /1000 para pasar al formato unix\n\n  return now > exp;\n}","map":{"version":3,"sources":["C:/ReacProyects/WebPersonal/Client/src/api/auth.js"],"names":["basePath","apiVersion","ACCESS_TOKEN","REFRESH_TOKEN","jwtDecode","getAccessTokenApi","accessToken","localStorage","getItem","willExpireToken","getRefreshTokenApi","refreshToken","refreshAcessTokenApi","url","params","method","body","JSON","stringify","headers","fetch","then","response","status","json","result","logout","setItem","removeItem","token","seconds","metaToken","exp","now","Date"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,UAArC;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,oBAA5C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAO,SAASC,iBAAT,GAA6B;AAClC,QAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqBN,YAArB,CAApB;;AAEA,MAAI,CAACI,WAAD,IAAgBA,WAAW,KAAK,MAApC,EAA4C;AAC1C,WAAO,IAAP;AACD;;AAED,SAAOG,eAAe,CAACH,WAAD,CAAf,GAA+B,IAA/B,GAAsCA,WAA7C;AACD;AAED,OAAO,SAASI,kBAAT,GAA6B;AAChC,QAAMC,YAAY,GAAGJ,YAAY,CAACC,OAAb,CAAqBL,aAArB,CAArB;;AAEA,MAAG,CAACQ,YAAD,IAAiBA,YAAY,KAAK,MAArC,EAA4C;AACxC,WAAO,IAAP;AACH;;AAED,SAAOF,eAAe,CAACE,YAAD,CAAf,GAA+B,IAA/B,GAAqCA,YAA5C;AACH;AAED,OAAO,SAASC,oBAAT,CAA8BD,YAA9B,EAA2C;AAC9C,QAAME,GAAG,GAAI,GAAEb,QAAS,IAAGC,UAAW,uBAAtC;AACA,QAAMa,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAE,MADK;AAEbC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,YAAf,CAFO;AAGbQ,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAHI,GAAf;AAQA,SAAOC,KAAK,CAACP,GAAD,EAAMC,MAAN,CAAL,CACNO,IADM,CACAC,QAAD,IAAc;AAChB,QAAGA,QAAQ,CAACC,MAAT,KAAoB,GAAvB,EAA2B;AACvB,aAAO,IAAP;AACH;;AACD,WAAOD,QAAQ,CAACE,IAAT,EAAP;AACH,GANM,EAONH,IAPM,CAODI,MAAM,IAAI;AACZ,QAAG,CAACA,MAAJ,EAAW;AACPC,MAAAA,MAAM;AACT,KAFD,MAEK;AACD,YAAM;AAACpB,QAAAA,WAAD;AAAcK,QAAAA;AAAd,UAA8Bc,MAApC;AACAlB,MAAAA,YAAY,CAACoB,OAAb,CAAqBzB,YAArB,EAAmCI,WAAnC;AACAC,MAAAA,YAAY,CAACoB,OAAb,CAAqBxB,aAArB,EAAoCQ,YAApC;AACH;AACJ,GAfM,CAAP;AAgBH;AAGD,OAAO,SAASe,MAAT,GAAiB;AACpBnB,EAAAA,YAAY,CAACqB,UAAb,CAAwB1B,YAAxB;AACAK,EAAAA,YAAY,CAACqB,UAAb,CAAwBzB,aAAxB;AACH;;AAGD,SAASM,eAAT,CAAyBoB,KAAzB,EAAgC;AAC9B,QAAMC,OAAO,GAAG,EAAhB;AACA,QAAMC,SAAS,GAAG3B,SAAS,CAACyB,KAAD,CAA3B;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAUD,SAAhB;AACA,QAAME,GAAG,GAAG,CAACC,IAAI,CAACD,GAAL,KAAaH,OAAd,IAAyB,IAArC,CAJ8B,CAIa;;AAC3C,SAAOG,GAAG,GAAGD,GAAb;AACD","sourcesContent":["import { basePath, apiVersion } from \"./config\";\r\nimport { ACCESS_TOKEN, REFRESH_TOKEN } from \"../utils/constants\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nexport function getAccessTokenApi() {\r\n  const accessToken = localStorage.getItem(ACCESS_TOKEN);\r\n\r\n  if (!accessToken || accessToken === \"null\") {\r\n    return null;\r\n  }\r\n\r\n  return willExpireToken(accessToken) ? null : accessToken;\r\n}\r\n\r\nexport function getRefreshTokenApi(){\r\n    const refreshToken = localStorage.getItem(REFRESH_TOKEN);\r\n    \r\n    if(!refreshToken || refreshToken === \"null\"){\r\n        return null;\r\n    }\r\n\r\n    return willExpireToken(refreshToken)? null: refreshToken;\r\n}\r\n\r\nexport function refreshAcessTokenApi(refreshToken){\r\n    const url = `${basePath}/${apiVersion}/refresh-access-token`;\r\n    const params = {\r\n      method: \"POST\",\r\n      body: JSON.stringify(refreshToken),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      }\r\n    };\r\n\r\n    return fetch(url, params)\r\n    .then((response) => {\r\n        if(response.status !== 200){\r\n            return null;\r\n        }\r\n        return response.json();\r\n    })\r\n    .then(result => {\r\n        if(!result){\r\n            logout();\r\n        }else{\r\n            const {accessToken, refreshToken} = result;\r\n            localStorage.setItem(ACCESS_TOKEN, accessToken);\r\n            localStorage.setItem(REFRESH_TOKEN, refreshToken);\r\n        }\r\n    });\r\n}\r\n\r\n\r\nexport function logout(){\r\n    localStorage.removeItem(ACCESS_TOKEN);\r\n    localStorage.removeItem(REFRESH_TOKEN);\r\n}\r\n\r\n\r\nfunction willExpireToken(token) {\r\n  const seconds = 60;\r\n  const metaToken = jwtDecode(token);\r\n  const { exp } = metaToken;\r\n  const now = (Date.now() + seconds) / 1000; //se agrega el /1000 para pasar al formato unix\r\n  return now > exp;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}